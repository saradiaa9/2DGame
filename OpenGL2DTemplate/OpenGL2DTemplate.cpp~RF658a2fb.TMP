#include <stdlib.h>
#include <glut.h>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <string>
#include <sstream>

time_t start;
time_t current;
//int countdown = 120;

float angle = 0.0;
float width = 1100;
float height = 700;

struct Collectible {
    float x;
    float y;
    float width;
    float height;
};
std::vector<Collectible> collectibles;

//float playerX = width/2;
//float playerY = height/2;

void SpecialInput(int key, int x, int y) {
    switch (key) {
    case GLUT_KEY_UP:
        playerY += 10;
        break;
    case GLUT_KEY_DOWN:
        playerY -= 10;
        break;
    case GLUT_KEY_LEFT:
        playerX -= 10;
        break;
    case GLUT_KEY_RIGHT:
        playerX += 10;
        break;
    }
    glutPostRedisplay();
}


void DrawStickMan() {
    glPushMatrix();
    glTranslatef(playerX,playerY, 0);
    glRotatef(angle, 0, 0, 1);

    // Draw the body as a rectangle
    glColor3f(1.0f, 0.0f, 0.5f);
    glBegin(GL_QUADS);
    glVertex2f(-5, 0); // Bottom-left corner
    glVertex2f(5, 0); // Bottom-right corner
    glVertex2f(5, -40); // Top-right corner
    glVertex2f(-5, -40); // Top-left corner
    glEnd();

    // Draw the head as a triangle
    glColor3f(1.0f, 0.0f, 0.5f);
    glBegin(GL_POLYGON);
    for (int i = 0; i < 360; i++) {
        float rad = i * 3.14159 / 180;
        glVertex2f(15 * cos(rad), 15 * sin(rad));
    }
    glEnd();;

    // Draw the crown using a polygon
    glColor3f(0.5f, 0.0f, 5.0f);  // Set color to blue
    glBegin(GL_POLYGON);
    glVertex2f(-5, 15); // Left point of the hat
    glVertex2f(5, 15); // Right point of the hat
    glVertex2f(5, 32);
    glVertex2f(0, 20); // Top point of the hat
    glVertex2f(-5, 32);

    glEnd();

    // Draw the arms
    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -10, 0);
    glRotatef(-45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(20, 0);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -10, 0);
    glRotatef(45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(-20, 0);
    glEnd();
    glPopMatrix();

    // Draw the legs
    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -40, 0);
    glRotatef(-45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(20, 0);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -40, 0);
    glRotatef(45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(-20, 0);
    glEnd();
    glPopMatrix();

    glPopMatrix();
    collectibles.push_back({ 0, 0, 100, 100 });
   
    
}

void DrawObstacle(float x, float y) {
    
    glColor3f(0.5f, 0.0f, 5.0f);// Set color to cyan
    glPushMatrix();
    glTranslatef(x, y, 0);
    glBegin(GL_QUADS);
    glVertex2f(-10, -10); // Bottom-left corner
    glVertex2f(10, -10); // Bottom-right corner
    glVertex2f(10, 10); // Top-right corner
    glVertex2f(-10, 10); // Top-left corner
    glEnd();

    glColor3f(1.0f, 0.0f, 0.5f); // Set color to red
    glBegin(GL_TRIANGLES);
    glVertex2f(10, 10);
    glVertex2f(-10, -10);
    glVertex2f(-10, 10);
    glEnd();

    glPopMatrix();



}

void DrawObstacles() {
    DrawObstacle(200, 200);
    collectibles.push_back({ 200, 200, 30, 30 });
    DrawObstacle(800, 500);
    collectibles.push_back({ 800, 500, 30, 30 });
    DrawObstacle(100, 500);
    collectibles.push_back({ 100, 500, 30, 30 });
    DrawObstacle(550, 200);
    collectibles.push_back({ 550, 200, 30, 30 });
    DrawObstacle(550, 500);
    collectibles.push_back({ 550, 500, 30, 30 });
    DrawObstacle(800, 200);
    collectibles.push_back({ 800, 200, 30, 30 });

}

void DrawCollectableSword(float x, float y) {
    glColor3f(0.5f, 0.0f, 5.0f);// Set color to black
    glPushMatrix();
    glTranslatef(x, y, 0);

    // Draw the handle of the sword
    glBegin(GL_QUADS);
    glVertex2f(-5, -20); // Bottom-left corner
    glVertex2f(5, -20); // Bottom-right corner
    glVertex2f(5, 20); // Top-right corner
    glVertex2f(-5, 20); // Top-left corner
    glEnd();

    // Draw the blade of the sword
    glBegin(GL_TRIANGLES);
    glVertex2f(5, 20); // Bottom-right point of the triangle
    glVertex2f(-5, 20); // Bottom-left point of the triangle
    glVertex2f(0, 40); // Top point of the triangle
    glEnd();

    // Draw the guard of the sword
    glBegin(GL_QUADS);
    glVertex2f(-10, -20); // Bottom-left corner
    glVertex2f(10, -20); // Bottom-right corner
    glVertex2f(10, -25); // Top-right corner
    glVertex2f(-10, -25); // Top-left corner
    glEnd();

    glPopMatrix();
}





bool CheckCollision(float x1, float y1, float w1, float h1, float x2, float y2, float w2, float h2) {
    if (x1 < x2 + w2 &&
        x1 + w1 > x2 &&
        y1 < y2 + h2 &&
        y1 + h1 > y2) {
        return true;
    }
    return false;
}

void DrawCollectables() {

   
        // Define the width and height of the collectibles
        float collectibleWidth = 60;
        float collectibleHeight = 60;

        // Define the bounds of the area
        float minX = 50;
        float maxX = 950;
        float minY = 50;
        float maxY = 550;

        for (int i = 0; i < 5; ++i) {
            float randomX, randomY;
            bool collisionDetected;
            do {
                // Generate a random position within the bounds
                randomX = minX + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (maxX - minX)));
                randomY = minY + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (maxY - minY)));

                // Check for collision with other collectibles
                collisionDetected = false;
                for (const auto& col : collectibles) {
                    if (CheckCollision(randomX, randomY, collectibleWidth, collectibleHeight, col.x, col.y, col.width, col.height)) {
                        collisionDetected = true;
                        break;
                    }
                }
            } while (collisionDetected);

            // Add the collectible to the vector
            collectibles.push_back({ randomX, randomY, collectibleWidth, collectibleHeight });

            // Draw the collectible at the random position
            DrawCollectableSword(randomX, randomY);
        }
}

void DrawHealthBar(int health) {
    if (health > 10) {
        health = 10; // Limit health to a maximum of 5 points
    }
    // Draw the health bar in the first line loop on the left
    glColor3f(0.0f, 1.0f, 0.0f); // Set color to green
    glLineWidth(2.0); // Set the line width
    glBegin(GL_QUADS);
    glVertex2f(50.0f, height - 60); // Bottom-left corner
    glVertex2f(50.0f + health * 30, height - 60); // Bottom-right corner
    glVertex2f(50.0f + health * 30, height - 40); // Top-right corner
    glVertex2f(50.0f, height - 40); // Top-left corner
    glEnd();
}




void DrawCastle() {
    // towers
    glColor3f(1.0f, 0.0f, 0.5f); // Light gray color for the base
    glPushMatrix();
    glTranslatef(width -990, height - 600, 0);
    glBegin(GL_QUADS);
    glVertex2f(-60, -30); // Bottom-left corner
    glVertex2f(60, -30); // Bottom-right corner
    glVertex2f(60, 30); // Top-right corner
    glVertex2f(-60, 30); // Top-left corner
    glEnd();
    glPopMatrix();

    // Castle base as a rectangle
    glColor3f(0.5f, 0.0f, 5.0f); // Light gray color for the base
    glPushMatrix();
    glTranslatef(width - 990, height - 600, 0);
    glBegin(GL_QUADS);
    glVertex2f(-30, -30); // Bottom-left corner
    glVertex2f(30, -30); // Bottom-right corner
    glVertex2f(30, 30); // Top-right corner
    glVertex2f(-30, 30); // Top-left corner
    glEnd();
    glPopMatrix();

    // Draw the roof as a triangle for both towers
    glColor3f(0.5f, 0.0f, 5.0f); // Dark gray color for the roof
    glPushMatrix();
    glTranslatef(width - 990, height - 600, 0);
    glBegin(GL_TRIANGLES);
    glVertex2f(-60, 30); // Left corner
    glVertex2f(-45, 60); // Top corner
    glVertex2f(-30, 30); // Right corner
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(width - 990, height - 600, 0);
    glBegin(GL_TRIANGLES);
    glVertex2f(30, 30); // Left corner
    glVertex2f(45, 60); // Top corner
    glVertex2f(60, 30); // Right corner
    glEnd();
    glPopMatrix();

    // Draw the gate as a rectangle
    glColor3f(1.0f, 0.0f, 0.5f); // Brown color for the gate
    glPushMatrix();
    glTranslatef(width - 990, height - 600, 0);
    glBegin(GL_QUADS);
    glVertex2f(-10, -30); // Bottom-left corner
    glVertex2f(10, -30); // Bottom-right corner
    glVertex2f(10, 0); // Top-right corner
    glVertex2f(-10, 0); // Top-left corner
    glEnd();
    glPopMatrix();

    collectibles.push_back({ width - 990, height - 600, 120, 90 });
}


void DrawPrincess(float x, float y) {
    glPushMatrix();
    glTranslatef(x, y, 0);
    glRotatef(angle, 0, 0, 1);

    // Draw the hair as a triangle
    glColor3f(0.5f, 0.0f, 5.0f);
    glBegin(GL_POLYGON);
    for (int i = 0; i < 360; i++) {
        float rad = i * 3.14159 / 180;
        glVertex2f(20 * cos(rad), 20 * sin(rad));
    }
    glEnd();

    // Draw the body as a rectangle
    glColor3f(1.0f, 0.0f, 0.5f);
    glBegin(GL_QUADS);
    glVertex2f(-5, 0); // Bottom-left corner
    glVertex2f(5, 0); // Bottom-right corner
    glVertex2f(5, -40); // Top-right corner
    glVertex2f(-5, -40); // Top-left corner
    glEnd();

    

    // Draw the head as a triangle
    glColor3f(1.0f, 0.0f, 0.5f);
    glBegin(GL_POLYGON);
    for (int i = 0; i < 360; i++) {
        float rad = i * 3.14159 / 180;
        glVertex2f(10 * cos(rad), 10 * sin(rad));
    }
    glEnd();;

    // Draw the crown using a polygon
    glColor3f(1.0f, 0.0f, 0.5f);  // Set color to blue
    glBegin(GL_POLYGON);
    glVertex2f(-5, 15); // Left point of the hat
    glVertex2f(5, 15); // Right point of the hat
    glVertex2f(5, 32);
    glVertex2f(0, 20); // Top point of the hat
    glVertex2f(-5, 32);

    glEnd();

    // Draw the arms
    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -10, 0);
    glRotatef(-45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(20, 0);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -10, 0);
    glRotatef(45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(-20, 0);
    glEnd();
    glPopMatrix();

    // Draw the legs
    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -40, 0);
    glRotatef(-45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(20, 0);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -40, 0);
    glRotatef(45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(-20, 0);
    glEnd();
    glPopMatrix();

    glPopMatrix();
}

void DrawPrincesses() {

    // Define the width and height of the collectibles
    float collectibleWidth = 100;
    float collectibleHeight = 100;

    // Define the bounds of the area
    float minX = 100;
    float maxX = 950;
    float minY = 100;
    float maxY = 550;

    for (int i = 0; i < 5; ++i) {
        float randomX, randomY;
        bool collisionDetected;
        do {
            // Generate a random position within the bounds
            randomX = minX + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (maxX - minX)));
            randomY = minY + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (maxY - minY)));

            // Check for collision with other collectibles
            collisionDetected = false;
            for (const auto& col : collectibles) {
                if (CheckCollision(randomX, randomY, collectibleWidth, collectibleHeight, col.x, col.y, col.width, col.height)) {
                    collisionDetected = true;
                    break;
                }
            }
        } while (collisionDetected);

        // Add the collectible to the vector
        collectibles.push_back({ randomX, randomY, collectibleWidth, collectibleHeight });

        // Draw the collectible at the random position
        DrawPrincess(randomX, randomY);
    }

}


void DrawShield(float x, float y) {
    glColor3f(0.5f, 0.0f, 5.0f); // Set color to gray
    glPushMatrix();
    glTranslatef(x, y, 0);

    // Draw the base of the shield as a circle
    float radius = 20.0f;
    int num_segments = 100;
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(0, 0);
    for (int i = 0; i <= num_segments; i++) {
        float theta = 2.0f * 3.1415926f * float(i) / float(num_segments);
        float x = radius * cosf(theta);
        float y = radius * sinf(theta);
        glVertex2f(x, y);
    }
    glEnd();

    glColor3f(1.0f, 0.0f, 0.5f);
    radius = 10.0f;
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(0, 0);
    for (int i = 0; i <= num_segments; i++) {
        float theta = 2.0f * 3.1415926f * float(i) / float(num_segments);
        float x = radius * cosf(theta);
        float y = radius * sinf(theta);
        glVertex2f(x, y);
    }
    glEnd();

    // Draw the handle of the shield as a rectangle
    glBegin(GL_QUADS);
    glVertex2f(-5, -25); // Bottom-left corner
    glVertex2f(5, -25); // Bottom-right corner
    glVertex2f(5, -20); // Top-right corner
    glVertex2f(-5, -20); // Top-left corner
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(-5, 20); // Bottom-left corner
    glVertex2f(5, 20); // Bottom-right corner
    glVertex2f(5, 25); // Top-right corner
    glVertex2f(-5, 25); // Top-left corner
    glEnd();

    glPopMatrix();
}

void DrawShields() {

    // Define the width and height of the collectibles
    float collectibleWidth = 60;
    float collectibleHeight = 60;

    // Define the bounds of the area
    float minX = 100;
    float maxX = 950;
    float minY = 100;
    float maxY = 550;

    for (int i = 0; i < 5; ++i) {
        float randomX, randomY;
        bool collisionDetected;
        do {
            // Generate a random position within the bounds
            randomX = minX + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (maxX - minX)));
            randomY = minY + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (maxY - minY)));

            // Check for collision with other collectibles
            collisionDetected = false;
            for (const auto& col : collectibles) {
                if (CheckCollision(randomX, randomY, collectibleWidth, collectibleHeight, col.x, col.y, col.width, col.height) ) {
                    collisionDetected = true;
                    break;
                }
            }
        } while (collisionDetected || (randomX==0 & randomY==0));

        // Add the collectible to the vector
        collectibles.push_back({ randomX, randomY, collectibleWidth, collectibleHeight });

        // Draw the collectible at the random position
        DrawShield(randomX, randomY);
    }

}


void Display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);

    // Draw the main border
    glColor3f(1.0f, 0.0f, 0.5f); // Set color to pink
    glLineWidth(2.0); // Set the line width
    glBegin(GL_LINE_LOOP);
    glVertex2f(20.0f, 20.0f); // Bottom-left corner
    glVertex2f(width - 20, 20.0f); // Bottom-right corner
    glVertex2f(width - 20, height - 20); // Top-right corner
    glVertex2f(20.0f, height - 20); // Top-left corner
    glEnd();

    glColor3f(0.5f, 0.0f, 5.f); // Set color to pink
    glLineWidth(2.0); // Set the line width
    glBegin(GL_LINE_LOOP);
    glVertex2f(30.0f, 30.0f); // Bottom-left corner
    glVertex2f(width - 30, 30.0f); // Bottom-right corner
    glVertex2f(width - 30, height - 30); // Top-right corner
    glVertex2f(30.0f, height - 30); // Top-left corner
    glEnd();

    glColor3f(0.5f, 0.0f, 5.f); // Set color to pink
    glLineWidth(2.0); // Set the line width
    glBegin(GL_LINE_LOOP);
    glVertex2f(30.0f, height - 30); // Bottom-left corner
    glVertex2f(width/3, height - 30); // Bottom-right corner
    glVertex2f(width / 3, height - 70); // Top-right corner
    glVertex2f(30.0f, height - 70); // Top-left corner
    glEnd();


    glColor3f(0.5f, 0.0f, 5.f); // Set color to pink
    glLineWidth(2.0); // Set the line width
    glBegin(GL_LINE_LOOP);
    glVertex2f(width/3, height - 30); // Bottom-left corner
    glVertex2f(width / 3 + width/3, height - 30); // Bottom-right corner
    glVertex2f(width / 3 + width/3, height - 70); // Top-right corner
    glVertex2f(width/3, height - 70); // Top-left corner
    glEnd();

    glColor3f(0.5f, 0.0f, 5.f); // Set color to pink
    glLineWidth(2.0); // Set the line width
    glBegin(GL_LINE_LOOP);
    glVertex2f(width / 3 + width / 3, height - 30); // Bottom-left corner
    glVertex2f(width - 30, height - 30); // Bottom-right corner
    glVertex2f(width - 30, height - 70); // Top-right corner
    glVertex2f(width / 3 + width / 3, height - 70); // Top-left corner
    glEnd();

   

    

    DrawStickMan();
    //glutPostRedisplay();
    DrawObstacles();
    DrawCollectables();
    DrawHealthBar(100);
    DrawCastle();
    DrawPrincesses();
    DrawShields();
    
    glFlush();
}

//void main(int argc, char** argr) {
//    glutInit(&argc, argr);
//
//    glutInitWindowSize(width, height);
//    glutInitWindowPosition(150, 150);
//
//    glutCreateWindow("OpenGL - Game");
//    glutDisplayFunc(Display);
//
//
//    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
//    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
//    gluOrtho2D(0.0, width, 0.0, height);
//    glutSpecialFunc(SpecialInput);
//
//    glutMainLoop();
//
//   
//}
