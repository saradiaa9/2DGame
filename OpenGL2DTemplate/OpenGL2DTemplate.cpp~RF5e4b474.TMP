#include <stdlib.h>
#include <glut.h>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <vector>

float angle = 0.0;
float width = 1100;
float height = 700;

void DrawStickMan() {
    glPushMatrix();
    glTranslatef(width/2, height/2, 0);
    glRotatef(angle, 0, 0, 1);

    // Draw the body as a rectangle
    glColor3f(1.0f, 0.0f, 0.5f);
    glBegin(GL_QUADS);
    glVertex2f(-5, 0); // Bottom-left corner
    glVertex2f(5, 0); // Bottom-right corner
    glVertex2f(5, -40); // Top-right corner
    glVertex2f(-5, -40); // Top-left corner
    glEnd();

    // Draw the head as a triangle
    glColor3f(1.0f, 0.0f, 0.5f);
    glBegin(GL_POLYGON);
    for (int i = 0; i < 360; i++) {
        float rad = i * 3.14159 / 180;
        glVertex2f(15 * cos(rad), 15 * sin(rad));
    }
    glEnd();;

    // Draw the crown using a polygon
    glColor3f(0.5f, 0.0f, 5.0f);  // Set color to blue
    glBegin(GL_POLYGON);
    glVertex2f(-5, 15); // Left point of the hat
    glVertex2f(5, 15); // Right point of the hat
    glVertex2f(5, 32);
    glVertex2f(0, 20); // Top point of the hat
    glVertex2f(-5, 32);

    glEnd();

    // Draw the arms
    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -10, 0);
    glRotatef(-45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(20, 0);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -10, 0);
    glRotatef(45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(-20, 0);
    glEnd();
    glPopMatrix();

    // Draw the legs
    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -40, 0);
    glRotatef(-45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(20, 0);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -40, 0);
    glRotatef(45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(-20, 0);
    glEnd();
    glPopMatrix();

    glPopMatrix();
}

void DrawObstacle(float x, float y) {
    
    glColor3f(0.5f, 0.0f, 5.0f);// Set color to cyan
    glPushMatrix();
    glTranslatef(x, y, 0);
    glBegin(GL_QUADS);
    glVertex2f(-10, -10); // Bottom-left corner
    glVertex2f(10, -10); // Bottom-right corner
    glVertex2f(10, 10); // Top-right corner
    glVertex2f(-10, 10); // Top-left corner
    glEnd();

    glColor3f(1.0f, 0.0f, 0.5f); // Set color to red
    glBegin(GL_TRIANGLES);
    glVertex2f(10, 10);
    glVertex2f(-10, -10);
    glVertex2f(-10, 10);
    glEnd();

    glPopMatrix();



}

void DrawObstacles() {
    DrawObstacle(200, 200);
    DrawObstacle(800, 500);
    DrawObstacle(100, 500);
    DrawObstacle(550, 200);
    DrawObstacle(550, 500);
    DrawObstacle(800, 200);
}

void DrawCollectableSword(float x, float y) {
    glColor3f(0.5f, 0.0f, 5.0f);// Set color to black
    glPushMatrix();
    glTranslatef(x, y, 0);

    // Draw the handle of the sword
    glBegin(GL_QUADS);
    glVertex2f(-5, -20); // Bottom-left corner
    glVertex2f(5, -20); // Bottom-right corner
    glVertex2f(5, 20); // Top-right corner
    glVertex2f(-5, 20); // Top-left corner
    glEnd();

    // Draw the blade of the sword
    glBegin(GL_TRIANGLES);
    glVertex2f(5, 20); // Bottom-right point of the triangle
    glVertex2f(-5, 20); // Bottom-left point of the triangle
    glVertex2f(0, 40); // Top point of the triangle
    glEnd();

    // Draw the guard of the sword
    glBegin(GL_QUADS);
    glVertex2f(-10, -20); // Bottom-left corner
    glVertex2f(10, -20); // Bottom-right corner
    glVertex2f(10, -25); // Top-right corner
    glVertex2f(-10, -25); // Top-left corner
    glEnd();

    glPopMatrix();
}

void DrawCollectables() {
    DrawCollectableSword(150, 500);
    DrawCollectableSword(200, 300);
    DrawCollectableSword(width - 400, height - 200);
    DrawCollectableSword(width - 250, height - 500);
    DrawCollectableSword(width - 180, height - 350);
}

void DrawHealthBar(float percentage) {
    // Determine the length of the health bar based on the percentage
    float length = 520 * percentage;

    glPushMatrix();
    glTranslatef(40.0f, 570.0f, 0);

    // Draw the background of the health bar
    glColor3f(0.5f, 0.0f, 5.0f); // Set color to gray
    glBegin(GL_QUADS);
    glVertex2f(0, -10); // Bottom-left corner
    glVertex2f(520, -10); // Bottom-right corner
    glVertex2f(520, 10); // Top-right corner
    glVertex2f(0, 10); // Top-left corner
    glEnd();

    // Draw the remaining health portion
    glColor3f(1.0f, 0.0f, 0.5f); // Set color to green
    glBegin(GL_QUADS);
    glVertex2f(0, -10); // Bottom-left corner
    glVertex2f(length, -10); // Bottom-right corner
    glVertex2f(length, 10); // Top-right corner
    glVertex2f(0, 10); // Top-left corner
    glEnd();

    glPopMatrix();
}

void DrawCastle() {
    // towers
    glColor3f(1.0f, 0.0f, 0.5f); // Light gray color for the base
    glPushMatrix();
    glTranslatef(width - 450, height - 500, 0);
    glBegin(GL_QUADS);
    glVertex2f(-60, -30); // Bottom-left corner
    glVertex2f(60, -30); // Bottom-right corner
    glVertex2f(60, 30); // Top-right corner
    glVertex2f(-60, 30); // Top-left corner
    glEnd();
    glPopMatrix();

    // Castle base as a rectangle
    glColor3f(0.5f, 0.0f, 5.0f); // Light gray color for the base
    glPushMatrix();
    glTranslatef(width - 450, height - 500, 0);
    glBegin(GL_QUADS);
    glVertex2f(-30, -30); // Bottom-left corner
    glVertex2f(30, -30); // Bottom-right corner
    glVertex2f(30, 30); // Top-right corner
    glVertex2f(-30, 30); // Top-left corner
    glEnd();
    glPopMatrix();

    // Draw the roof as a triangle for both towers
    glColor3f(0.5f, 0.0f, 5.0f); // Dark gray color for the roof
    glPushMatrix();
    glTranslatef(width - 450, height - 500, 0);
    glBegin(GL_TRIANGLES);
    glVertex2f(-60, 30); // Left corner
    glVertex2f(-45, 60); // Top corner
    glVertex2f(-30, 30); // Right corner
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(width - 450, height - 500, 0);
    glBegin(GL_TRIANGLES);
    glVertex2f(30, 30); // Left corner
    glVertex2f(45, 60); // Top corner
    glVertex2f(60, 30); // Right corner
    glEnd();
    glPopMatrix();

    // Draw the gate as a rectangle
    glColor3f(1.0f, 0.0f, 0.5f); // Brown color for the gate
    glPushMatrix();
    glTranslatef(width - 450, height - 500, 0);
    glBegin(GL_QUADS);
    glVertex2f(-10, -30); // Bottom-left corner
    glVertex2f(10, -30); // Bottom-right corner
    glVertex2f(10, 0); // Top-right corner
    glVertex2f(-10, 0); // Top-left corner
    glEnd();
    glPopMatrix();
}


void DrawPrincess(float x, float y) {
    glPushMatrix();
    glTranslatef(x, y, 0);
    glRotatef(angle, 0, 0, 1);

    // Draw the hair as a triangle
    glColor3f(0.5f, 0.0f, 5.0f);
    glBegin(GL_POLYGON);
    for (int i = 0; i < 360; i++) {
        float rad = i * 3.14159 / 180;
        glVertex2f(20 * cos(rad), 20 * sin(rad));
    }
    glEnd();

    // Draw the body as a rectangle
    glColor3f(1.0f, 0.0f, 0.5f);
    glBegin(GL_QUADS);
    glVertex2f(-5, 0); // Bottom-left corner
    glVertex2f(5, 0); // Bottom-right corner
    glVertex2f(5, -40); // Top-right corner
    glVertex2f(-5, -40); // Top-left corner
    glEnd();

    

    // Draw the head as a triangle
    glColor3f(1.0f, 0.0f, 0.5f);
    glBegin(GL_POLYGON);
    for (int i = 0; i < 360; i++) {
        float rad = i * 3.14159 / 180;
        glVertex2f(10 * cos(rad), 10 * sin(rad));
    }
    glEnd();;

    // Draw the crown using a polygon
    glColor3f(1.0f, 0.0f, 0.5f);  // Set color to blue
    glBegin(GL_POLYGON);
    glVertex2f(-5, 15); // Left point of the hat
    glVertex2f(5, 15); // Right point of the hat
    glVertex2f(5, 32);
    glVertex2f(0, 20); // Top point of the hat
    glVertex2f(-5, 32);

    glEnd();

    // Draw the arms
    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -10, 0);
    glRotatef(-45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(20, 0);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -10, 0);
    glRotatef(45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(-20, 0);
    glEnd();
    glPopMatrix();

    // Draw the legs
    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -40, 0);
    glRotatef(-45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(20, 0);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.0f, 0.0f, 0.5f);
    glTranslatef(0, -40, 0);
    glRotatef(45, 0, 0, 1);
    glBegin(GL_LINES);
    glVertex2f(0, 0);
    glVertex2f(-20, 0);
    glEnd();
    glPopMatrix();

    glPopMatrix();
}

void DrawPrincesses() {
    

}

void DrawShields() {

}


void DrawShield(float x, float y) {
    glColor3f(0.5f, 0.0f, 5.0f); // Set color to gray
    glPushMatrix();
    glTranslatef(x, y, 0);

    // Draw the base of the shield as a circle
    float radius = 20.0f;
    int num_segments = 100;
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(0, 0);
    for (int i = 0; i <= num_segments; i++) {
        float theta = 2.0f * 3.1415926f * float(i) / float(num_segments);
        float x = radius * cosf(theta);
        float y = radius * sinf(theta);
        glVertex2f(x, y);
    }
    glEnd();

    glColor3f(1.0f, 0.0f, 0.5f);
    radius = 10.0f;
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(0, 0);
    for (int i = 0; i <= num_segments; i++) {
        float theta = 2.0f * 3.1415926f * float(i) / float(num_segments);
        float x = radius * cosf(theta);
        float y = radius * sinf(theta);
        glVertex2f(x, y);
    }
    glEnd();

    // Draw the handle of the shield as a rectangle
    glBegin(GL_QUADS);
    glVertex2f(-5, -25); // Bottom-left corner
    glVertex2f(5, -25); // Bottom-right corner
    glVertex2f(5, -20); // Top-right corner
    glVertex2f(-5, -20); // Top-left corner
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(-5, 20); // Bottom-left corner
    glVertex2f(5, 20); // Bottom-right corner
    glVertex2f(5, 25); // Top-right corner
    glVertex2f(-5, 25); // Top-left corner
    glEnd();

    glPopMatrix();
}


void Display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);

    // Draw the main border
    glColor3f(1.0f, 0.0f, 0.5f); // Set color to pink
    glLineWidth(2.0); // Set the line width
    glBegin(GL_LINE_LOOP);
    glVertex2f(20.0f, 20.0f); // Bottom-left corner
    glVertex2f(width - 20, 20.0f); // Bottom-right corner
    glVertex2f(width - 20, height - 20); // Top-right corner
    glVertex2f(20.0f, height - 20); // Top-left corner
    glEnd();

    glColor3f(0.5f, 0.0f, 5.f); // Set color to pink
    glLineWidth(2.0); // Set the line width
    glBegin(GL_LINE_LOOP);
    glVertex2f(30.0f, 30.0f); // Bottom-left corner
    glVertex2f(width - 30, 30.0f); // Bottom-right corner
    glVertex2f(width - 30, height - 30); // Top-right corner
    glVertex2f(30.0f, height - 30); // Top-left corner
    glEnd();

    glColor3f(0.5f, 0.0f, 5.f); // Set color to pink
    glLineWidth(2.0); // Set the line width
    glBegin(GL_LINE_LOOP);
    glVertex2f(30.0f, height - 30); // Bottom-left corner
    glVertex2f(width/3, height - 30); // Bottom-right corner
    glVertex2f(width / 3, height - 70); // Top-right corner
    glVertex2f(30.0f, height - 70); // Top-left corner
    glEnd();


    glColor3f(0.5f, 0.0f, 5.f); // Set color to pink
    glLineWidth(2.0); // Set the line width
    glBegin(GL_LINE_LOOP);
    glVertex2f(width/3, height - 30); // Bottom-left corner
    glVertex2f(width / 3 + width/3, height - 30); // Bottom-right corner
    glVertex2f(width / 3 + width/3, height - 70); // Top-right corner
    glVertex2f(width/3, height - 70); // Top-left corner
    glEnd();

    glColor3f(0.5f, 0.0f, 5.f); // Set color to pink
    glLineWidth(2.0); // Set the line width
    glBegin(GL_LINE_LOOP);
    glVertex2f(width / 3 + width / 3, height - 30); // Bottom-left corner
    glVertex2f(width, height - 30); // Bottom-right corner
    glVertex2f(width, height - 70); // Top-right corner
    glVertex2f(width / 3 + width / 3, height - 70); // Top-left corner
    glEnd();

   

    

    DrawStickMan();
    DrawObstacles();
    DrawCollectables();
    /*DrawHealthBar(1);
    DrawCastle();
    DrawPrincesses();
    DrawShield(150, 350);*/
    
    glFlush();
}

void main(int argc, char** argr) {
    glutInit(&argc, argr);

    glutInitWindowSize(width, height);
    glutInitWindowPosition(150, 150);

    glutCreateWindow("OpenGL - Game");
    glutDisplayFunc(Display);


    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
    gluOrtho2D(0.0, width, 0.0, height);

    glutMainLoop();

   
}
